const _ = require('lodash');
const Path = require('path-parser');
const { URL } = require('url');
const mongoose = require('mongoose');
const requireLogin = require('../middlewares/requireLogin');
const requireCredits = require('../middlewares/requireCredits');
const Mailer = require('../services/Mailer');
const surveyTemplate= require ('../services/emailTemplates/surveyTemplate');
const Survey = mongoose.model('surveys');

module.exports = app => {

	/*
		Response sent when recipient responds
	*/
	app.get('/api/surveys/thanks', (req, res) => {
		res.send('Thanks for voting');
	});

	/*
		Handler for SendGrid responses to clicks
	*/
	app.post('/api/surveys/webhooks', (req, res) => {
		// extract surveyId and choice(yes/no)
		const p = new Path('/api/surveys/:surveyId/:choice');

		const events = _.chain(req.body)
			// Map over list of events 
			.map(({ email, url }) => {
				// Extract url
				const match = p.test(new URL(url).pathname); //null if nothing extracted
				if (match) {
					return {email, 
						surveyId:match.surveyId, 
						choice: match.choice};
				}
			})
			// Remove undefined or unique elements
			.compact()
			.uniqBy('email', 'surveyId');

		console.log(events);
		res.send({});
	});
	/*
		Create a new survey and send out a big email
		Also removes credits when emails sent
	*/
	app.post('/api/surveys', requireLogin, requireCredits, async (req,res) => {
		const { title, subject, body, recipients } = req.body;

		/*
			Note that: 
			1. (email => {return {email:email}}) 
			   is condensed to:
			   (email => ({ email }))
			2. req.user.id is generated by mongo
		*/
		const survey = new Survey({
			title,
			subject,
			body,
			recipients: recipients.split(',').map(email => ({ email })),
			_user: req.user.id,
			dateSent: Date.now()
		});

		/*
			Send the email 
			Calls services/emailTemplates/surveyTemplate.js
			template = body of survey
		*/
		const mailer = new Mailer(survey, surveyTemplate(survey));
		try {
			await mailer.send();
			await survey.save(); //save survey to mongodb
			req.user.credits -= 1;
			const user = await req.user.save(); //save user's credits to mongodb
			res.send(user);
		} catch (err) {
			console.log(err);
			res.status(422).send(err);
		}
	});
};